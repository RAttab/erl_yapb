// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stvlist.proto

#ifndef PROTOBUF_INCLUDED_stvlist_2eproto
#define PROTOBUF_INCLUDED_stvlist_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stvlist_2eproto 

namespace protobuf_stvlist_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stvlist_2eproto
class stvlist;
class stvlistDefaultTypeInternal;
extern stvlistDefaultTypeInternal _stvlist_default_instance_;
namespace google {
namespace protobuf {
template<> ::stvlist* Arena::CreateMaybeMessage<::stvlist>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class stvlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stvlist) */ {
 public:
  stvlist();
  virtual ~stvlist();

  stvlist(const stvlist& from);

  inline stvlist& operator=(const stvlist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  stvlist(stvlist&& from) noexcept
    : stvlist() {
    *this = ::std::move(from);
  }

  inline stvlist& operator=(stvlist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const stvlist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stvlist* internal_default_instance() {
    return reinterpret_cast<const stvlist*>(
               &_stvlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(stvlist* other);
  friend void swap(stvlist& a, stvlist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline stvlist* New() const final {
    return CreateMaybeMessage<stvlist>(NULL);
  }

  stvlist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<stvlist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const stvlist& from);
  void MergeFrom(const stvlist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stvlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ids = 2;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 2;
  ::google::protobuf::uint32 ids(int index) const;
  void set_ids(int index, ::google::protobuf::uint32 value);
  void add_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // bytes tvid = 1;
  void clear_tvid();
  static const int kTvidFieldNumber = 1;
  const ::std::string& tvid() const;
  void set_tvid(const ::std::string& value);
  #if LANG_CXX11
  void set_tvid(::std::string&& value);
  #endif
  void set_tvid(const char* value);
  void set_tvid(const void* value, size_t size);
  ::std::string* mutable_tvid();
  ::std::string* release_tvid();
  void set_allocated_tvid(::std::string* tvid);

  // @@protoc_insertion_point(class_scope:stvlist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr tvid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stvlist_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// stvlist

// bytes tvid = 1;
inline void stvlist::clear_tvid() {
  tvid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& stvlist::tvid() const {
  // @@protoc_insertion_point(field_get:stvlist.tvid)
  return tvid_.GetNoArena();
}
inline void stvlist::set_tvid(const ::std::string& value) {
  
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stvlist.tvid)
}
#if LANG_CXX11
inline void stvlist::set_tvid(::std::string&& value) {
  
  tvid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stvlist.tvid)
}
#endif
inline void stvlist::set_tvid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stvlist.tvid)
}
inline void stvlist::set_tvid(const void* value, size_t size) {
  
  tvid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stvlist.tvid)
}
inline ::std::string* stvlist::mutable_tvid() {
  
  // @@protoc_insertion_point(field_mutable:stvlist.tvid)
  return tvid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* stvlist::release_tvid() {
  // @@protoc_insertion_point(field_release:stvlist.tvid)
  
  return tvid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void stvlist::set_allocated_tvid(::std::string* tvid) {
  if (tvid != NULL) {
    
  } else {
    
  }
  tvid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tvid);
  // @@protoc_insertion_point(field_set_allocated:stvlist.tvid)
}

// repeated uint32 ids = 2;
inline int stvlist::ids_size() const {
  return ids_.size();
}
inline void stvlist::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 stvlist::ids(int index) const {
  // @@protoc_insertion_point(field_get:stvlist.ids)
  return ids_.Get(index);
}
inline void stvlist::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:stvlist.ids)
}
inline void stvlist::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:stvlist.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stvlist::ids() const {
  // @@protoc_insertion_point(field_list:stvlist.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stvlist::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:stvlist.ids)
  return &ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stvlist_2eproto
